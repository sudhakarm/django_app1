---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: app
  name: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
        - args:
            - sh
            - -c
            - "python manage.py makemigrations && python manage.py migrate && python manage.py wait_for_db && python manage.py runserver 0.0.0.0:8000"
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: DB_HOST
                  name: env-dev
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: DB_NAME
                  name: env-dev
            - name: DB_PASS
              valueFrom:
                configMapKeyRef:
                  key: DB_PASS
                  name: env-dev
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  key: DB_USER
                  name: env-dev
          image: 819112041654.dkr.ecr.ap-south-1.amazonaws.com/demo_ecr_django:django_app1
          #image: django_app1-app:latest
          name: app
          ports:
            - containerPort: 8000
          resources: {}
          volumeMounts:
            - mountPath: /app
              name: app-claim0
      restartPolicy: Always
      volumes:
        - name: app-claim0
          persistentVolumeClaim:
            claimName: app-claim0
status: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: app
  name: app
spec:
  type: LoadBalancer
  ports:
    - name: "8000"
      port: 8000
      targetPort: 8000
  selector:
    app: app
status:
  loadBalancer: {}